{
  "openapi": "3.0.1",
  "info": { "title": "Optimizely CMS Content API", "version": "preview2" },
  "servers": [
    { "url": "/_cms/preview2", "description": "Optimizely CMS Content API" }
  ],
  "paths": {
    "/changesets": {
      "get": {
        "tags": ["Changesets"],
        "summary": "List changeset",
        "description": "Lists all changeset using the provided options.",
        "operationId": "Changesets_List",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "maximum": 10000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "maximum": 10000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ChangesetPage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Changesets"],
        "summary": "Create changeset",
        "description": "Creates a new changeset.",
        "operationId": "Changesets_Create",
        "requestBody": {
          "description": "The changeset that should be created.",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Changeset" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Changeset" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/changesets/{key}": {
      "get": {
        "tags": ["Changesets"],
        "summary": "Get changeset",
        "description": "Gets the changeset with the provided key.",
        "operationId": "Changesets_Get",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the changeset to retrieve.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Changeset" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Changesets"],
        "summary": "Delete changeset",
        "description": "Deletes the changeset with the provided key. If a changeset with the provided key does not exist an error is returned.",
        "operationId": "Changesets_Delete",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the changeset to delete.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Changeset" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Changesets"],
        "summary": "Create or replace changeset",
        "description": "Creates or replaces a changeset. If a changeset with the provided key exist it is replaced.\r\nOtherwise a new changeset is created.",
        "operationId": "Changesets_Put",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the changeset to update or create.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "The values of the created or replaced changeset.",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Changeset" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Changeset" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/changesets/{changeset}/items/{key}/versions/{version}": {
      "get": {
        "tags": ["Changesets"],
        "summary": "Get changeset item",
        "description": "Gets the changeset item for the specified content reference.",
        "operationId": "Changesets_GetItem",
        "parameters": [
          {
            "name": "changeset",
            "in": "path",
            "description": "The changeset key",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "key",
            "in": "path",
            "description": "The content key",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The content version",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ChangesetItem" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Changesets"],
        "summary": "Delete changeset item",
        "description": "Deletes the specified changeset item from the changeset.",
        "operationId": "Changesets_DeleteItem",
        "parameters": [
          {
            "name": "changeset",
            "in": "path",
            "description": "The changeset key",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "key",
            "in": "path",
            "description": "The content key",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The content version",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ChangesetItem" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/changesets/{changeset}/items": {
      "get": {
        "tags": ["Changesets"],
        "summary": "List changeset items",
        "description": "Lists the available changeset items for the specified changeset using\r\nthe provided options.",
        "operationId": "Changesets_ListItems",
        "parameters": [
          {
            "name": "changeset",
            "in": "path",
            "description": "The changeset key",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "maximum": 10000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "maximum": 10000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ChangesetItemPage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Changesets"],
        "summary": "Create changeset item",
        "description": "Creates the given changeset item.",
        "operationId": "Changesets_CreateItem",
        "parameters": [
          {
            "name": "changeset",
            "in": "path",
            "description": "The changeset key",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "The changeset item",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ChangesetItem" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ChangesetItem" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/changesets/{changeset}/items/{contentKey}/versions/{contentVersion}": {
      "put": {
        "tags": ["Changesets"],
        "summary": "Update changeset item",
        "description": "Updates the given changeset item.",
        "operationId": "Changesets_UpdateItem",
        "parameters": [
          {
            "name": "changeset",
            "in": "path",
            "description": "The changeset key",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "contentKey",
            "in": "path",
            "description": "The content key",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "contentVersion",
            "in": "path",
            "description": "The content version",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "allowCreate",
            "in": "query",
            "description": "Indicates if a new changeset item should be created if it does not exist",
            "schema": { "type": "boolean" }
          }
        ],
        "requestBody": {
          "description": "The changeset item",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ChangesetItem" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ChangesetItem" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/content": {
      "post": {
        "tags": ["Content"],
        "summary": "Create content",
        "description": "Create a new content item.",
        "operationId": "Content_Create",
        "parameters": [
          {
            "name": "skipValidation",
            "in": "query",
            "description": "Indicates that the content validation should be ignored.",
            "schema": { "type": "boolean" }
          }
        ],
        "requestBody": {
          "description": "The content item that should be created.",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ContentItem" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/vnd.optimizely.cms.v1.includeSchema+json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentItemWithContentTypes"
                }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContentItem" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/content/{key}": {
      "get": {
        "tags": ["Content"],
        "summary": "Get content",
        "description": "Get shared metadata about the content instance with the provided key.",
        "operationId": "Content_GetMetadata",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the content to retrieve metadata for.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "allowDeleted",
            "in": "query",
            "description": "Indicates that metadata for a deleted content may be returned.",
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContentMetadata" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Content"],
        "summary": "Update content",
        "description": "Update an existing content item. If a content item with the provided key does not exist an error is returned.",
        "operationId": "Content_PatchMetadata",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the content item to patch.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "The values of the content item that should be updated.",
          "content": {
            "application/merge-patch+json": {
              "schema": { "$ref": "#/components/schemas/ContentMetadata" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContentMetadata" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Content"],
        "summary": "Delete content",
        "description": "Deletes the content item with the provided key. If a content item with the provided key does not exist an error is returned.",
        "operationId": "Content_Delete",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the content item to delete.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "permanent",
            "in": "query",
            "description": "Indicates that the content item should be permanently deleted immediately or if it should be soft deleted first.",
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContentMetadata" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/content/{key}/path": {
      "get": {
        "tags": ["Content"],
        "summary": "Get content path",
        "description": "Get the content path with the provided key.",
        "operationId": "Content_GetPath",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the content path to retrieve.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "maximum": 10000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "maximum": 10000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContentMetadataPage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/content/{key}/items": {
      "get": {
        "tags": ["Content"],
        "summary": "List content in container",
        "description": "List the content items located in a specific container.",
        "operationId": "Content_ListItems",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the content to retrieve items for.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "contentTypes",
            "in": "query",
            "description": "Indicates which content types or base types to include in the list.",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "maximum": 10000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "maximum": 10000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContentMetadataPage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/content/{key}/assets": {
      "get": {
        "tags": ["Content"],
        "summary": "List assets",
        "description": "List the assets that belongs to a content instance.",
        "operationId": "Content_ListAssets",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the content to retrieve assets for.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "contentTypes",
            "in": "query",
            "description": "Indicates which content types or base types to include in the list.",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "maximum": 10000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "maximum": 10000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContentMetadataPage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/content/{key}:copy": {
      "post": {
        "tags": ["Content"],
        "summary": "Copy content",
        "description": "Create a copy of the content item with the provided key.",
        "operationId": "Content_Copy",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the content item to copy.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "Optional instructions for how to copy content.",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CopyContentOptions" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContentMetadata" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/content/{key}:undelete": {
      "post": {
        "tags": ["Content"],
        "summary": "Restore content",
        "description": "Restore the deleted content item with the provided key. If a content item with the provided key is not deleted an error is returned.",
        "operationId": "Content_Undelete",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the content item to undelete.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContentMetadata" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/content/versions": {
      "get": {
        "tags": ["Content"],
        "summary": "Query versions",
        "description": "List content versions based on the provided query options.",
        "operationId": "Content_ListAllVersions",
        "parameters": [
          {
            "name": "locales",
            "in": "query",
            "description": "Indicates which content locales that should be listed. Use 'NEUTRAL' to include locale-neutral content.\r\nLocale must be a valid IETF BCP-47 language tag.",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Indicates which status content versions must have to be listed.",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/VersionStatus" }
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "maximum": 10000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "maximum": 10000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.optimizely.cms.v1.includeSchema+json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentItemListWithContentTypes"
                }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContentItemPage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/content/{key}/versions": {
      "get": {
        "tags": ["Content"],
        "summary": "List versions",
        "description": "List versions of the content item with the provided key and the provided options.",
        "operationId": "Content_ListVersions",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "locales",
            "in": "query",
            "description": "Indicates which content locales that should be listed. Use 'NEUTRAL' to include locale-neutral content.\r\nLocale must be a valid IETF BCP-47 language tag.",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Indicates which status content versions must have to be listed.",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/VersionStatus" }
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "maximum": 10000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "maximum": 10000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.optimizely.cms.v1.includeSchema+json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentItemListWithContentTypes"
                }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContentItemPage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Content"],
        "summary": "Create version",
        "description": "Create a new version of a content item.",
        "operationId": "Content_CreateVersion",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the content item for which a new content version should be created.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "skipValidation",
            "in": "query",
            "description": "Indicates that the content validation should be ignored.",
            "schema": { "type": "boolean" }
          }
        ],
        "requestBody": {
          "description": "The content version that should be created.",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ContentItem" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/vnd.optimizely.cms.v1.includeSchema+json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentItemWithContentTypes"
                }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContentItem" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Content"],
        "summary": "Delete locale",
        "description": "Deletes the content item with the provided key. If a content item with the provided key does not exist an error is returned.",
        "operationId": "Content_DeleteLocale",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "locale", "in": "query", "schema": { "type": "string" } }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.optimizely.cms.v1.includeSchema+json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentItemWithContentTypes"
                }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContentItem" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/content/{key}/versions/{version}": {
      "get": {
        "tags": ["Content"],
        "summary": "Get version",
        "description": "Get the content item with the provided key and version.",
        "operationId": "Content_GetVersion",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "locale", "in": "query", "schema": { "type": "string" } }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.optimizely.cms.v1.includeSchema+json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentItemWithContentTypes"
                }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContentItem" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Content"],
        "summary": "Update version",
        "description": "Update an existing content item. If a content item with the provided key does not exist an error is returned.",
        "operationId": "Content_PatchVersion",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the content item that should be updated.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The version of the content that should be updated.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "The locale of the content that should be updated.",
            "schema": { "type": "string" }
          },
          {
            "name": "skipValidation",
            "in": "query",
            "description": "Indicates that the content validation should be ignored.",
            "schema": { "type": "boolean" }
          }
        ],
        "requestBody": {
          "description": "The content information that should be updated.",
          "content": {
            "application/merge-patch+json": {
              "schema": { "$ref": "#/components/schemas/ContentItem" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.optimizely.cms.v1.includeSchema+json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentItemWithContentTypes"
                }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContentItem" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Content"],
        "summary": "Delete version",
        "description": "Deletes the content item with the provided key. If a content item with the provided key does not exist an error is returned.",
        "operationId": "Content_DeleteVersion",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.optimizely.cms.v1.includeSchema+json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentItemWithContentTypes"
                }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContentItem" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/contenttypes": {
      "get": {
        "tags": ["ContentTypes"],
        "summary": "List content types",
        "description": "List content types using the provided options.",
        "operationId": "ContentTypes_List",
        "parameters": [
          {
            "name": "forContainerType",
            "in": "query",
            "description": "Only include types that are available for creation under the provided container type",
            "schema": { "type": "string", "example": "" }
          },
          {
            "name": "sources",
            "in": "query",
            "description": "Indicates which sources should be included when listing content types.\r\nUse All to include content types from all sources or\r\nDefault to include content types without a specific sources.",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "maximum": 10000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "maximum": 10000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContentTypePage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["ContentTypes"],
        "summary": "Create content type",
        "description": "Create a new content type.",
        "operationId": "ContentTypes_Create",
        "requestBody": {
          "description": "The content type that should be created.",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ContentType" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContentType" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/contenttypes/{key}": {
      "get": {
        "tags": ["ContentTypes"],
        "summary": "Get content type",
        "description": "Get the content type with the provided key.",
        "operationId": "ContentTypes_Get",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the content type to retrieve.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContentType" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["ContentTypes"],
        "summary": "Create or replace content type",
        "description": "Create or replace a content type. If a content type with the provided key exist it is replaced.\r\nOtherwise a new content type is created.",
        "operationId": "ContentTypes_Put",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the content type to update or create.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "ignoreDataLossWarnings",
            "in": "query",
            "description": "Update the content type even though the changes might result in data loss.",
            "schema": { "type": "boolean" }
          }
        ],
        "requestBody": {
          "description": "The values of the created or replaced content type.",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ContentType" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContentType" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["ContentTypes"],
        "summary": "Update content type",
        "description": "Update an existing content type. If a content type with the provided key does not exist an error is returned.",
        "operationId": "ContentTypes_Patch",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the content type to patch.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "ignoreDataLossWarnings",
            "in": "query",
            "description": "Update the content type even though the changes might result in data loss.",
            "schema": { "type": "boolean" }
          }
        ],
        "requestBody": {
          "description": "The values of the content type that should be updated.",
          "content": {
            "application/merge-patch+json": {
              "schema": { "$ref": "#/components/schemas/ContentType" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContentType" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["ContentTypes"],
        "summary": "Delete content type",
        "description": "Deletes the content type with the provided key. If a content type with the provided key does not exist an error is returned.",
        "operationId": "ContentTypes_Delete",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the content type to delete.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContentType" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/displaytemplates": {
      "get": {
        "tags": ["DisplayTemplates"],
        "summary": "List display templates",
        "description": "List display templates using the provided options.",
        "operationId": "DisplayTemplates_List",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "maximum": 10000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "maximum": 10000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DisplayTemplatePage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["DisplayTemplates"],
        "summary": "Create display template",
        "description": "Create a new display template.",
        "operationId": "DisplayTemplates_Create",
        "requestBody": {
          "description": "The display template that should be created.",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/DisplayTemplate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DisplayTemplate" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/displaytemplates/{key}": {
      "get": {
        "tags": ["DisplayTemplates"],
        "summary": "Get display template",
        "description": "Get the display template with the provided key.",
        "operationId": "DisplayTemplates_Get",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the display template to retrieve.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DisplayTemplate" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["DisplayTemplates"],
        "summary": "Create or replace a display template",
        "description": "Create or replace a display template. If a display template with the provided key exist it is replaced.\r\nOtherwise a new display template is created.",
        "operationId": "DisplayTemplates_Put",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the display template to update or create.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "The values of the created or replaced display template.",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/DisplayTemplate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DisplayTemplate" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["DisplayTemplates"],
        "summary": "Update display template",
        "description": "Update an existing display template.",
        "operationId": "DisplayTemplates_Patch",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the display template to patch.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "The values of the display template that should be updated.",
          "content": {
            "application/merge-patch+json": {
              "schema": { "$ref": "#/components/schemas/DisplayTemplate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DisplayTemplate" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["DisplayTemplates"],
        "summary": "Delete display template",
        "description": "Deletes the display template with the provided key.",
        "operationId": "DisplayTemplates_Delete",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the display template to delete.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DisplayTemplate" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/oauth/token": {
      "post": {
        "tags": ["Oauth"],
        "summary": "Request access token",
        "description": "Request an access token. This endpoint only supports the 'client_credentials' grant type\r\nand will only issue short-lived tokens.",
        "operationId": "Oauth_Token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OauthTokenRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OauthToken" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OauthTokenError" }
              }
            }
          }
        }
      }
    },
    "/packages/{key}": {
      "get": {
        "tags": ["Packages"],
        "summary": "Get job status",
        "description": "Get a package job status.",
        "operationId": "Packages_Get",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the package job.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PackageJob" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/packages": {
      "get": {
        "tags": ["Packages"],
        "summary": "Export package",
        "description": "Export a data package.",
        "operationId": "Packages_Export",
        "parameters": [
          {
            "name": "includeReadOnly",
            "in": "query",
            "description": "Indicates if read-only resources should be included in the export data.",
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.optimizely.cms.v1.manifest+json": {
                "schema": { "$ref": "#/components/schemas/Manifest" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Packages"],
        "summary": "Import package",
        "description": "Import a data package.",
        "operationId": "Packages_Import",
        "parameters": [
          {
            "name": "container",
            "in": "query",
            "description": "The key of the container content where new content items should be created under.",
            "schema": { "type": "string" }
          },
          {
            "name": "overwriteExistingContentItems",
            "in": "query",
            "description": "Indicates if the existing content item in CMS could be overwritten when the importing package contains\r\ncontent item with the same key.\r\nIf set to `false`, always create new content item under the specified container regardless of the content key.",
            "schema": { "type": "boolean", "default": false }
          },
          {
            "name": "ignoreDataLossWarnings",
            "in": "query",
            "description": "Updates the content type even though the changes might result in data loss.",
            "schema": { "type": "boolean", "default": false }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "Specifies the locale in which content item in that locale will be imported. If no locale is defined\r\nthen content in all locales are imported.",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.episerver.cms.data": {
              "schema": { "type": "string", "format": "binary" }
            },
            "application/vnd.optimizely.cms.v1.manifest+json": {
              "schema": { "type": "string", "format": "binary" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ImportPackageResult" }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PackageJob" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/propertyformats": {
      "get": {
        "tags": ["PropertyFormats"],
        "summary": "List property formats",
        "description": "List all property formats using the provided options.",
        "operationId": "PropertyFormats_List",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "maximum": 10000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "maximum": 10000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PropertyFormatPage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/propertyformats/{key}": {
      "get": {
        "tags": ["PropertyFormats"],
        "summary": "Get property format",
        "description": "Get the property format with the provided key.",
        "operationId": "PropertyFormats_Get",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the property format to retrieve.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "allowDeleted",
            "in": "query",
            "description": "Indicates that a deleted property format may be returned.",
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PropertyFormat" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/propertygroups": {
      "get": {
        "tags": ["PropertyGroups"],
        "summary": "List property groups",
        "description": "List property groups using the provided options.",
        "operationId": "PropertyGroups_List",
        "parameters": [
          {
            "name": "sources",
            "in": "query",
            "description": "Indicates which property groups sources that should be listed.\r\nUse All to include groups from all sources or\r\nDefault to include groups without a specific sources.",
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PropertyGroupPage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["PropertyGroups"],
        "summary": "Create property group",
        "description": "Create a new property group.",
        "operationId": "PropertyGroups_Create",
        "requestBody": {
          "description": "The property group that should be created.",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PropertyGroup" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PropertyGroup" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    },
    "/propertygroups/{key}": {
      "get": {
        "tags": ["PropertyGroups"],
        "summary": "Get property group",
        "description": "Get the property group with the provided key.",
        "operationId": "PropertyGroups_Get",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the property group to retrieve.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PropertyGroup" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["PropertyGroups"],
        "summary": "Create or replace property group",
        "description": "Create or replace a property group. If a property group with the provided key exist it is replaced.\r\nOtherwise a new property group is created.",
        "operationId": "PropertyGroups_Put",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the property group to update or create.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "The values of the created or replaced property group.",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PropertyGroup" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PropertyGroup" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["PropertyGroups"],
        "summary": "Update property group",
        "description": "Update an existing property group.",
        "operationId": "PropertyGroups_Patch",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the property group to patch.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "The values of the property group that should be updated.",
          "content": {
            "application/merge-patch+json": {
              "schema": { "$ref": "#/components/schemas/PropertyGroup" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PropertyGroup" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["PropertyGroups"],
        "summary": "Delete property group",
        "description": "Deletes the property group with the provided key.",
        "operationId": "PropertyGroups_Delete",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the property group to delete.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PropertyGroup" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": { "$ref": "#/components/schemas/ProblemDetails" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BinaryProperty": {
        "allOf": [
          { "$ref": "#/components/schemas/ContentTypeProperty" },
          {
            "type": "object",
            "properties": {
              "imageDescriptor": {
                "$ref": "#/components/schemas/ImageDescriptor"
              }
            },
            "additionalProperties": false
          }
        ],
        "description": "Describes a property that can contain a reference to binary data."
      },
      "BooleanProperty": {
        "allOf": [
          { "$ref": "#/components/schemas/ContentTypeProperty" },
          { "type": "object", "additionalProperties": false }
        ],
        "description": "Describes a property that can contain a boolean value."
      },
      "Changeset": {
        "required": ["displayName", "key"],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The unique key of this Changeset"
          },
          "source": {
            "maxLength": 255,
            "type": "string",
            "description": "The source of this Changeset"
          },
          "displayName": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The name of this Changeset."
          },
          "created": {
            "type": "string",
            "description": "A timestamp indicating when this changeset was first created.",
            "format": "date-time",
            "readOnly": true
          },
          "createdBy": {
            "type": "string",
            "description": "The username of the user that created this changeset.",
            "readOnly": true
          },
          "lastModified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "A writable implementation of an Changeset."
      },
      "ChangesetItem": {
        "required": ["reference"],
        "type": "object",
        "properties": {
          "reference": { "$ref": "#/components/schemas/ContentReference" },
          "category": {
            "type": "string",
            "description": "Gets/sets item category."
          }
        },
        "additionalProperties": false,
        "description": "A writable implementation of an ChangesetItem."
      },
      "ChangesetItemPage": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ChangesetItem" },
            "description": "The items in this paged collection.",
            "readOnly": true
          },
          "pageIndex": {
            "type": "integer",
            "description": "The zero-based index of the current page.",
            "format": "int32",
            "readOnly": true
          },
          "pageSize": {
            "type": "integer",
            "description": "The number of item in each page. Not necessarily the same as the number of items in this page.",
            "format": "int32",
            "readOnly": true
          },
          "totalItemCount": {
            "type": "integer",
            "description": "The estimated total number of items in the collection. May be omitted if the total item count is unknown.",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ChangesetPage": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Changeset" },
            "description": "The items in this paged collection.",
            "readOnly": true
          },
          "pageIndex": {
            "type": "integer",
            "description": "The zero-based index of the current page.",
            "format": "int32",
            "readOnly": true
          },
          "pageSize": {
            "type": "integer",
            "description": "The number of item in each page. Not necessarily the same as the number of items in this page.",
            "format": "int32",
            "readOnly": true
          },
          "totalItemCount": {
            "type": "integer",
            "description": "The estimated total number of items in the collection. May be omitted if the total item count is unknown.",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ComponentListItem": {
        "allOf": [
          { "$ref": "#/components/schemas/ListPropertyItem" },
          {
            "required": ["contentType"],
            "type": "object",
            "properties": {
              "contentType": {
                "maxLength": 50,
                "minLength": 1,
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ],
        "description": "Describes a property list item that can contain a component instance of a specific type."
      },
      "ComponentProperty": {
        "allOf": [
          { "$ref": "#/components/schemas/ContentTypeProperty" },
          {
            "required": ["contentType"],
            "type": "object",
            "properties": {
              "contentType": {
                "maxLength": 50,
                "minLength": 1,
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ],
        "description": "Describes a property that can contain a component instance of a specific type."
      },
      "ContentBaseType": {
        "enum": [
          "page",
          "component",
          "media",
          "image",
          "video",
          "folder",
          "experience",
          "section",
          "element"
        ],
        "type": "string",
        "description": "Represent the base type of a ContentType."
      },
      "ContentComponent": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the content component. If Reference is set, the name is automatically set to the name of the referenced content."
          },
          "displayOption": {
            "type": "string",
            "description": "An optional display option for the content component."
          },
          "segmentationGroup": {
            "type": "string",
            "description": "An optional group for the personalizable component."
          },
          "segments": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Specifies the settings for the content component."
          },
          "reference": {
            "type": "string",
            "description": "A reference to the content of this component.\r\nCannot be assigned together with Content."
          },
          "contentType": {
            "type": "string",
            "description": "The key of the content type that this is an embedded instance of."
          },
          "content": {
            "additionalProperties": { "type": "object" },
            "description": "Dictionary with all custom properties as specified by associated ContentType"
          }
        },
        "additionalProperties": false,
        "description": "Represents a content component."
      },
      "ContentItem": {
        "required": ["displayName", "key"],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {},
            "description": "Set of content type properties."
          },
          "key": {
            "minLength": 1,
            "type": "string",
            "description": "The key that identifies this content item.",
            "readOnly": true
          },
          "locale": {
            "type": "string",
            "description": "The locale of this content instance.",
            "readOnly": true
          },
          "version": {
            "type": "string",
            "description": "The version identifier of this content instance.",
            "readOnly": true
          },
          "contentType": {
            "type": "string",
            "description": "The content type of this content item.",
            "readOnly": true
          },
          "displayName": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The display name of this content item."
          },
          "published": {
            "type": "string",
            "description": "Indicates a time when this content was published or should be published.",
            "format": "date-time",
            "nullable": true
          },
          "expired": {
            "type": "string",
            "description": "Indicates a time when this content expired or should expire.",
            "format": "date-time",
            "nullable": true
          },
          "status": { "$ref": "#/components/schemas/VersionStatus" },
          "delayPublishUntil": {
            "type": "string",
            "description": "Indicates a time when this content version should transition to published status. Must only be assigned when Status is set to Scheduled.",
            "format": "date-time",
            "nullable": true
          },
          "lastModified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The username of the user that made the latest modification to this content instance.",
            "readOnly": true
          },
          "container": {
            "type": "string",
            "description": "The key that identifies the container content that this content item belongs to.",
            "nullable": true
          },
          "owner": {
            "type": "string",
            "description": "The key that identifies the owner of this content. Content that is own by another content is also known as an asset.",
            "nullable": true
          },
          "routeSegment": {
            "maxLength": 255,
            "type": "string",
            "description": "A string that represents the segment that should be used when routing or generate routes to the current content instance.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a version of a content item."
      },
      "ContentItemListWithContentTypes": {
        "type": "object",
        "properties": {
          "contentTypes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ContentType" },
            "description": "The content types that are used by the content items in the response.",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ContentItem" },
            "description": "The content items in this paged collection.",
            "readOnly": true
          },
          "pageIndex": {
            "type": "integer",
            "description": "The zero-based index of the current page.",
            "format": "int32",
            "readOnly": true
          },
          "pageSize": {
            "type": "integer",
            "description": "The number of item in each page. Not necessarily the same as the number of items in this page.",
            "format": "int32",
            "readOnly": true
          },
          "totalItemCount": {
            "type": "integer",
            "description": "The estimated total number of items in the collection. May be omitted if the total item count is unknown.",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "The response object for Page`1 when used ContentType are included."
      },
      "ContentItemPage": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ContentItem" },
            "description": "The items in this paged collection.",
            "readOnly": true
          },
          "pageIndex": {
            "type": "integer",
            "description": "The zero-based index of the current page.",
            "format": "int32",
            "readOnly": true
          },
          "pageSize": {
            "type": "integer",
            "description": "The number of item in each page. Not necessarily the same as the number of items in this page.",
            "format": "int32",
            "readOnly": true
          },
          "totalItemCount": {
            "type": "integer",
            "description": "The estimated total number of items in the collection. May be omitted if the total item count is unknown.",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ContentItemWithContentTypes": {
        "type": "object",
        "properties": {
          "contentTypes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ContentType" },
            "description": "The content types that are used by the content item in the response.",
            "readOnly": true
          },
          "item": { "$ref": "#/components/schemas/ContentItem" }
        },
        "additionalProperties": false,
        "description": "The response object for ContentItem when used ContentType are included."
      },
      "ContentListItem": {
        "allOf": [
          { "$ref": "#/components/schemas/ListPropertyItem" },
          {
            "type": "object",
            "properties": {
              "allowedTypes": {
                "type": "array",
                "items": { "type": "string" }
              },
              "restrictedTypes": {
                "type": "array",
                "items": { "type": "string" }
              }
            },
            "additionalProperties": false
          }
        ],
        "description": "Describes a property list item that can hold a content item."
      },
      "ContentLocaleInfo": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The display name of the content.",
            "readOnly": true,
            "example": ""
          },
          "created": {
            "type": "string",
            "description": "The date and time when the first locale version for the content was created.",
            "format": "date-time",
            "readOnly": true,
            "example": ""
          },
          "createdBy": {
            "type": "string",
            "description": "The username of the user that created this locale version of content.",
            "readOnly": true,
            "example": ""
          },
          "status": { "$ref": "#/components/schemas/LocaleStatus" }
        },
        "additionalProperties": false,
        "description": "Describes information about a locale instance of a content item."
      },
      "ContentMetadata": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key that identifies this content."
          },
          "contentType": {
            "type": "string",
            "description": "The content type of this content."
          },
          "container": {
            "type": "string",
            "description": "The key that identifies the container content that this content belongs to.",
            "nullable": true
          },
          "hasItems": {
            "type": "boolean",
            "description": "Indicates if the content contains any content items.",
            "readOnly": true
          },
          "owner": {
            "type": "string",
            "description": "The key that identifies the owner of this content. Content that is own by another content is also known as an asset.",
            "nullable": true
          },
          "locales": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ContentLocaleInfo"
            },
            "description": "Set of locales that the content item has been created for.",
            "readOnly": true
          },
          "deleted": {
            "type": "string",
            "description": "A timestamp, which if provided, indicates when this content was deleted.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "deletedBy": {
            "type": "string",
            "description": "The username of the user that deleted this content.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Represents metadata about a content item."
      },
      "ContentMetadataPage": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ContentMetadata" },
            "description": "The items in this paged collection.",
            "readOnly": true
          },
          "pageIndex": {
            "type": "integer",
            "description": "The zero-based index of the current page.",
            "format": "int32",
            "readOnly": true
          },
          "pageSize": {
            "type": "integer",
            "description": "The number of item in each page. Not necessarily the same as the number of items in this page.",
            "format": "int32",
            "readOnly": true
          },
          "totalItemCount": {
            "type": "integer",
            "description": "The estimated total number of items in the collection. May be omitted if the total item count is unknown.",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ContentProperty": {
        "allOf": [
          { "$ref": "#/components/schemas/ContentTypeProperty" },
          {
            "type": "object",
            "properties": {
              "allowedTypes": {
                "type": "array",
                "items": { "type": "string" }
              },
              "restrictedTypes": {
                "type": "array",
                "items": { "type": "string" }
              }
            },
            "additionalProperties": false
          }
        ],
        "description": "Describes a property that can contain a content item."
      },
      "ContentReference": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The content key that identifies the content.",
            "readOnly": true
          },
          "locale": {
            "type": "string",
            "description": "The name of the content locale",
            "readOnly": true
          },
          "version": {
            "type": "string",
            "description": "The identifier of a specific version of the content.",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "A reference to a specific content instance."
      },
      "ContentReferenceListItem": {
        "allOf": [
          { "$ref": "#/components/schemas/ListPropertyItem" },
          {
            "type": "object",
            "properties": {
              "allowedTypes": {
                "type": "array",
                "items": { "type": "string" }
              },
              "restrictedTypes": {
                "type": "array",
                "items": { "type": "string" }
              }
            },
            "additionalProperties": false
          }
        ],
        "description": "Describes a property list item that can hold a reference to a content item."
      },
      "ContentReferenceProperty": {
        "allOf": [
          { "$ref": "#/components/schemas/ContentTypeProperty" },
          {
            "type": "object",
            "properties": {
              "allowedTypes": {
                "type": "array",
                "items": { "type": "string" }
              },
              "restrictedTypes": {
                "type": "array",
                "items": { "type": "string" }
              }
            },
            "additionalProperties": false
          }
        ],
        "description": "Describes a property that can contain a reference to a content item."
      },
      "ContentType": {
        "required": ["key"],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 255,
            "minLength": 2,
            "type": "string",
            "description": "The key that identifies this ContentType.",
            "readOnly": true
          },
          "displayName": {
            "maxLength": 255,
            "type": "string",
            "description": "The display name of this ContentType."
          },
          "description": {
            "maxLength": 255,
            "type": "string",
            "description": "A description of this ContentType."
          },
          "baseType": { "$ref": "#/components/schemas/ContentBaseType" },
          "source": {
            "type": "string",
            "description": "A string that is used to indicate the source of this ContentType.",
            "readOnly": true
          },
          "sortOrder": {
            "type": "integer",
            "description": "An value that is used to when sorting ContentType instances.",
            "format": "int32"
          },
          "features": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ContentTypeFeature" },
            "description": "Provides a set of features that content based on this ContentType supports.\r\nThis value is assigned based on the BaseType and cannot be modified."
          },
          "usage": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ContentTypeUsage" },
            "description": "Specifies how this ContentType can be used."
          },
          "mayContainTypes": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Provides a set of content types that can be created in container of this type"
          },
          "mediaFileExtensions": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Provides a set of media file extensions that this content type can handle."
          },
          "created": {
            "type": "string",
            "description": "A timestamp indicating when this ContentType was first created.",
            "format": "date-time",
            "readOnly": true
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The username of the user that made the latest modification to this ContentType.",
            "readOnly": true
          },
          "lastModified": {
            "type": "string",
            "description": "Indicates the last time this content type was modified.",
            "format": "date-time",
            "readOnly": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "required": ["type"],
              "oneOf": [
                { "$ref": "#/components/schemas/BinaryProperty" },
                { "$ref": "#/components/schemas/BooleanProperty" },
                { "$ref": "#/components/schemas/ComponentProperty" },
                { "$ref": "#/components/schemas/ContentProperty" },
                { "$ref": "#/components/schemas/ContentReferenceProperty" },
                { "$ref": "#/components/schemas/DateTimeProperty" },
                { "$ref": "#/components/schemas/FloatProperty" },
                { "$ref": "#/components/schemas/IntegerProperty" },
                { "$ref": "#/components/schemas/StringProperty" },
                { "$ref": "#/components/schemas/UrlProperty" },
                { "$ref": "#/components/schemas/JsonStringProperty" },
                { "$ref": "#/components/schemas/ListProperty" }
              ],
              "properties": {
                "editorSettings": {
                  "type": "object",
                  "additionalProperties": { "type": "object" },
                  "description": "Settings for the editor.",
                  "nullable": true
                }
              },
              "description": "A writable implementation of an ContentTypeProperty.",
              "discriminator": { "propertyName": "type" }
            },
            "description": "Dictionary with all custom properties of this ContentType.",
            "discriminator": { "propertyName": "type" }
          }
        },
        "additionalProperties": false,
        "description": "A writable implementation of an ContentType."
      },
      "ContentTypeFeature": {
        "enum": [
          "localization",
          "versioning",
          "publishPeriod",
          "routing",
          "binary"
        ],
        "type": "string",
        "description": "Represent different features that a content type can have."
      },
      "ContentTypePage": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ContentType" },
            "description": "The items in this paged collection.",
            "readOnly": true
          },
          "pageIndex": {
            "type": "integer",
            "description": "The zero-based index of the current page.",
            "format": "int32",
            "readOnly": true
          },
          "pageSize": {
            "type": "integer",
            "description": "The number of item in each page. Not necessarily the same as the number of items in this page.",
            "format": "int32",
            "readOnly": true
          },
          "totalItemCount": {
            "type": "integer",
            "description": "The estimated total number of items in the collection. May be omitted if the total item count is unknown.",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ContentTypeProperty": {
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": { "$ref": "#/components/schemas/PropertyDataType" },
          "format": {
            "type": "string",
            "description": "The key of the PropertyFormat that this ContentTypeProperty is an instance of.",
            "nullable": true
          },
          "displayName": {
            "maxLength": 255,
            "type": "string",
            "description": "The display name of this ContentTypeProperty."
          },
          "description": {
            "maxLength": 2000,
            "type": "string",
            "description": "A description of this ContentTypeProperty."
          },
          "required": {
            "type": "boolean",
            "description": "Indicates if a property instance of this type must always be assigned a value."
          },
          "localized": {
            "type": "boolean",
            "description": "Indicates if a property instance of this type should be localized for each locale\r\nor if values are shared between all locales."
          },
          "group": {
            "type": "string",
            "description": "A reference to the PropertyGroup that this ContentTypeProperty is part of.\r\nIf this value is empty, a group may be assigned by the system."
          },
          "sortOrder": {
            "type": "integer",
            "description": "An value that is used to when sorting ContentTypeProperty instances.",
            "format": "int32"
          },
          "indexingType": { "$ref": "#/components/schemas/IndexingType" },
          "editor": {
            "type": "string",
            "description": "Editor used for managing this property.",
            "nullable": true
          },
          "editorSettings": {
            "type": "object",
            "additionalProperties": { "type": "object" },
            "description": "Settings for the editor.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A writable implementation of an ContentTypeProperty.",
        "discriminator": { "propertyName": "type" }
      },
      "ContentTypeUsage": {
        "enum": ["property", "instance"],
        "type": "string",
        "description": "Represent the usage types for a ContentType."
      },
      "CopyContentOptions": {
        "type": "object",
        "properties": {
          "allowDeleted": {
            "type": "boolean",
            "description": "Indicates if deleted content could be used as source."
          },
          "container": {
            "type": "string",
            "description": "Optional key of the container where the copied content should be placed.",
            "nullable": true
          },
          "owner": {
            "type": "string",
            "description": "Optional key of the owner where the copied content should be placed.",
            "nullable": true
          },
          "keepPublishedStatus": {
            "type": "boolean",
            "description": "Indicates if published versions of the content should keep their published status rather than being created as a draft version at the destination."
          }
        },
        "additionalProperties": false,
        "description": "Options for copying content."
      },
      "DateTimeListItem": {
        "allOf": [
          { "$ref": "#/components/schemas/ListPropertyItem" },
          {
            "type": "object",
            "properties": {
              "minimum": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "maximum": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "description": "Describes a property list item that can contain a timestamp."
      },
      "DateTimeProperty": {
        "allOf": [
          { "$ref": "#/components/schemas/ContentTypeProperty" },
          {
            "type": "object",
            "properties": {
              "minimum": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "maximum": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ],
        "description": "Describes a property that can contain a timestamp."
      },
      "DisplaySetting": {
        "required": ["displayName"],
        "type": "object",
        "properties": {
          "displayName": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The display name of this display setting."
          },
          "editor": {
            "maxLength": 50,
            "type": "string",
            "description": "The suggested editor for this display setting."
          },
          "sortOrder": {
            "type": "integer",
            "description": "The sort order of this display setting within the template.",
            "format": "int32"
          },
          "choices": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/DisplaySettingChoice"
            },
            "description": "The available choices for this display setting."
          }
        },
        "additionalProperties": false,
        "description": "Describes a setting for a display template."
      },
      "DisplaySettingChoice": {
        "required": ["displayName"],
        "type": "object",
        "properties": {
          "displayName": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The display name of this display setting."
          },
          "sortOrder": {
            "type": "integer",
            "description": "The sort order of this choice within the setting.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Describes a setting for a display template."
      },
      "DisplayTemplate": {
        "required": ["displayName", "key"],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 255,
            "minLength": 2,
            "type": "string",
            "description": "The key that identifies this display template.",
            "readOnly": true
          },
          "displayName": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The display name of this display template."
          },
          "nodeType": {
            "maxLength": 50,
            "minLength": 2,
            "type": "string",
            "description": "The optional node type this display template is valid for.",
            "nullable": true
          },
          "baseType": { "$ref": "#/components/schemas/ContentBaseType" },
          "contentType": {
            "maxLength": 255,
            "minLength": 2,
            "type": "string",
            "description": "The optional key of the content type this display template is valid for.",
            "nullable": true
          },
          "isDefault": {
            "type": "boolean",
            "description": "If this is the default display template for the associated base type,\r\nnode type or content type."
          },
          "created": {
            "type": "string",
            "description": "A timestamp indicating when this display template was first created.",
            "format": "date-time",
            "readOnly": true
          },
          "createdBy": {
            "type": "string",
            "description": "The username of the user that created this display template.",
            "readOnly": true
          },
          "lastModified": {
            "type": "string",
            "description": "A timestamp indicating when this display template was last modified.",
            "format": "date-time",
            "readOnly": true
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The username of the user that last modified this display template.",
            "readOnly": true
          },
          "settings": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/DisplaySetting"
            },
            "description": "The available settings for this display template."
          }
        },
        "additionalProperties": false,
        "description": "Describes a display template that can be assigned to content."
      },
      "DisplayTemplatePage": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/DisplayTemplate" },
            "description": "The items in this paged collection.",
            "readOnly": true
          },
          "pageIndex": {
            "type": "integer",
            "description": "The zero-based index of the current page.",
            "format": "int32",
            "readOnly": true
          },
          "pageSize": {
            "type": "integer",
            "description": "The number of item in each page. Not necessarily the same as the number of items in this page.",
            "format": "int32",
            "readOnly": true
          },
          "totalItemCount": {
            "type": "integer",
            "description": "The estimated total number of items in the collection. May be omitted if the total item count is unknown.",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DoubleEnumerationSettings": {
        "type": "object",
        "properties": {
          "values": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "Enumeration values for this property or format."
          }
        },
        "additionalProperties": false,
        "description": "A writable implementation of an EnumerationSettings`1."
      },
      "FloatListItem": {
        "allOf": [
          { "$ref": "#/components/schemas/ListPropertyItem" },
          {
            "type": "object",
            "properties": {
              "minimum": {
                "type": "number",
                "format": "double",
                "nullable": true
              },
              "maximum": {
                "type": "number",
                "format": "double",
                "nullable": true
              },
              "enum": {
                "$ref": "#/components/schemas/DoubleEnumerationSettings"
              }
            },
            "additionalProperties": false
          }
        ],
        "description": "Describes a property list item that can contain a float number."
      },
      "FloatProperty": {
        "allOf": [
          { "$ref": "#/components/schemas/ContentTypeProperty" },
          {
            "type": "object",
            "properties": {
              "minimum": {
                "type": "number",
                "format": "double",
                "nullable": true
              },
              "maximum": {
                "type": "number",
                "format": "double",
                "nullable": true
              },
              "enum": {
                "$ref": "#/components/schemas/DoubleEnumerationSettings"
              }
            },
            "additionalProperties": false
          }
        ],
        "description": "Describes a property that can contain a float number."
      },
      "ImageDescriptor": {
        "type": "object",
        "properties": {
          "width": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "The image width in pixels.",
            "format": "int32"
          },
          "height": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "The image height in pixels.",
            "format": "int32"
          },
          "pregenerated": {
            "type": "boolean",
            "description": "Indicates if the image should be pregenerated when a new image is uploaded rather than when first requested."
          }
        },
        "additionalProperties": false,
        "description": "Instruction for generating an alternative image from the main binary of an image content item."
      },
      "ImportPackageMessage": {
        "type": "object",
        "properties": {
          "section": {
            "type": "string",
            "description": "The section where the message originated from.",
            "nullable": true,
            "readOnly": true
          },
          "message": {
            "type": "string",
            "description": "The message describing an outcome.",
            "readOnly": true
          },
          "identifier": {
            "type": "string",
            "description": "The identifier of the resource that was the reason for this message to be created.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Describes a message from a package importing operation."
      },
      "ImportPackageResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indication if the import succeeded.",
            "readOnly": true
          },
          "outcomes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ImportPackageMessage" },
            "description": "List of messages describing the outcome from the package import."
          },
          "errors": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ImportPackageMessage" },
            "description": "List of error messages from the package import."
          },
          "warnings": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ImportPackageMessage" },
            "description": "List of warning messages from the package import."
          }
        },
        "additionalProperties": false,
        "description": "Describes the result of a data package import."
      },
      "IndexingType": {
        "enum": ["disabled", "queryable", "searchable"],
        "type": "string",
        "description": "Represent the indexing type of a ContentTypeProperty."
      },
      "Int32EnumerationSettings": {
        "type": "object",
        "properties": {
          "values": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "Enumeration values for this property or format."
          }
        },
        "additionalProperties": false,
        "description": "A writable implementation of an EnumerationSettings`1."
      },
      "IntegerListItem": {
        "allOf": [
          { "$ref": "#/components/schemas/ListPropertyItem" },
          {
            "type": "object",
            "properties": {
              "minimum": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "maximum": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "enum": {
                "$ref": "#/components/schemas/Int32EnumerationSettings"
              }
            },
            "additionalProperties": false
          }
        ],
        "description": "Describes a property list item that can contain integers."
      },
      "IntegerProperty": {
        "allOf": [
          { "$ref": "#/components/schemas/ContentTypeProperty" },
          {
            "type": "object",
            "properties": {
              "minimum": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "maximum": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "enum": {
                "$ref": "#/components/schemas/Int32EnumerationSettings"
              }
            },
            "additionalProperties": false
          }
        ],
        "description": "Describes a property that can contain an integer."
      },
      "JsonStringProperty": {
        "allOf": [
          { "$ref": "#/components/schemas/ContentTypeProperty" },
          { "type": "object", "additionalProperties": false }
        ],
        "description": "Describes a property that can contain a JSON value in the form of a string."
      },
      "ListProperty": {
        "allOf": [
          { "$ref": "#/components/schemas/ContentTypeProperty" },
          {
            "required": ["items"],
            "type": "object",
            "properties": {
              "minItems": {
                "type": "integer",
                "description": "Specifies the minimum number of items in this array property.",
                "format": "int32",
                "nullable": true
              },
              "maxItems": {
                "type": "integer",
                "description": "Specifies the maximum number of items in this array property.",
                "format": "int32",
                "nullable": true
              },
              "items": {
                "required": ["type"],
                "oneOf": [
                  { "$ref": "#/components/schemas/ComponentListItem" },
                  { "$ref": "#/components/schemas/ContentListItem" },
                  { "$ref": "#/components/schemas/ContentReferenceListItem" },
                  { "$ref": "#/components/schemas/DateTimeListItem" },
                  { "$ref": "#/components/schemas/FloatListItem" },
                  { "$ref": "#/components/schemas/IntegerListItem" },
                  { "$ref": "#/components/schemas/StringListItem" },
                  { "$ref": "#/components/schemas/UrlListItem" }
                ],
                "description": "Describes the list item of a ListProperty in the CMS.",
                "discriminator": { "propertyName": "type" }
              }
            },
            "additionalProperties": false
          }
        ],
        "description": "A property in the CMS that may hold a list of items."
      },
      "ListPropertyItem": {
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": { "$ref": "#/components/schemas/PropertyDataType" },
          "format": {
            "type": "string",
            "description": "The key of the PropertyFormat that this property item is an instance of.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Describes the list item of a ListProperty in the CMS.",
        "discriminator": { "propertyName": "type" }
      },
      "LocaleStatus": {
        "enum": ["draft", "published"],
        "type": "string",
        "description": "Represent the different status values of a content locale."
      },
      "Manifest": {
        "type": "object",
        "properties": {
          "propertyGroups": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PropertyGroup" },
            "description": "List of content type property groups."
          },
          "contentTypes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ContentType" },
            "description": "List of content types."
          },
          "displayTemplates": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/DisplayTemplate" },
            "description": "List of display templates."
          },
          "lastModified": {
            "type": "string",
            "description": "A timestamp indicated when any item in this manifest was last modified.",
            "format": "date-time",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Manifest that describest CMS definitions."
      },
      "OauthToken": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "Gets or sets the access token.",
            "nullable": true
          },
          "expires_in": {
            "type": "integer",
            "description": "Gets or sets the expiry time in seconds.",
            "format": "int32"
          },
          "token_type": {
            "type": "string",
            "description": "Gets or sets the token type."
          }
        },
        "additionalProperties": false,
        "description": "Represents an OAuth JSON Web Token (JWT) and\r\nits expiry in seconds."
      },
      "OauthTokenError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Gets or sets the error.",
            "nullable": true
          },
          "error_description": {
            "type": "string",
            "description": "Gets or sets the error description.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents an OAuth error."
      },
      "OauthTokenRequest": {
        "type": "object",
        "properties": {
          "grant_type": {
            "type": "string",
            "description": "Gets or sets the grant type.",
            "nullable": true
          },
          "client_id": {
            "type": "string",
            "description": "Gets or sets the client id.",
            "nullable": true
          },
          "client_secret": {
            "type": "string",
            "description": "Gets or sets the client secret.",
            "nullable": true
          },
          "act_as": {
            "type": "string",
            "description": "Get or sets the subject to act as.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents an OAuth token request."
      },
      "PackageJob": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "An unique key that can be used to track the staus of a package job.",
            "readOnly": true
          },
          "status": { "$ref": "#/components/schemas/PackageJobStatus" },
          "outcomes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PackageJobMessage" },
            "description": "List of messages describing the outcome from the package job."
          },
          "errors": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PackageJobMessage" },
            "description": "List of error messages from the package job."
          },
          "warnings": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PackageJobMessage" },
            "description": "List of warning messages from the package job."
          },
          "created": {
            "type": "string",
            "description": "A timestamp indicates when this task was first created.",
            "format": "date-time",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Describes the status of a package job."
      },
      "PackageJobMessage": {
        "type": "object",
        "properties": {
          "section": {
            "type": "string",
            "description": "The section where the message originated from.",
            "readOnly": true,
            "example": ""
          },
          "message": {
            "type": "string",
            "description": "The message describing an outcome.",
            "readOnly": true,
            "example": ""
          },
          "identifier": {
            "type": "string",
            "description": "The identifier of the resource that was the reason for this message to be created.",
            "nullable": true,
            "readOnly": true,
            "example": ""
          }
        },
        "additionalProperties": false,
        "description": "Describes a status message from a package job."
      },
      "PackageJobStatus": {
        "type": "object",
        "additionalProperties": false,
        "description": "Represent the status of a package job."
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "nullable": true },
          "title": { "type": "string", "nullable": true },
          "status": { "type": "integer", "format": "int32", "nullable": true },
          "detail": { "type": "string", "nullable": true },
          "instance": { "type": "string", "nullable": true },
          "code": { "type": "string", "nullable": true, "readOnly": true },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": { "type": "string" }
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "PropertyDataType": {
        "enum": [
          "string",
          "url",
          "boolean",
          "integer",
          "float",
          "dateTime",
          "contentReference",
          "content",
          "binary",
          "json",
          "array",
          "component"
        ],
        "type": "string",
        "description": "Represent the basic type that a PropertyFormat\r\nis using for data storage and data transport."
      },
      "PropertyFormat": {
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 50,
            "type": "string",
            "description": "The key that identifies this PropertyFormat."
          },
          "dataType": { "$ref": "#/components/schemas/PropertyDataType" },
          "itemType": { "$ref": "#/components/schemas/PropertyDataType" },
          "displayName": {
            "type": "string",
            "description": "The name and identifier of this PropertyFormat."
          },
          "editor": {
            "type": "string",
            "description": "Editor used for managing properties with this format.",
            "nullable": true
          },
          "deleted": { "type": "boolean" },
          "editorSettings": {
            "type": "object",
            "additionalProperties": { "type": "object" },
            "description": "Settings for the editor.",
            "nullable": true
          },
          "enum": {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "anyOf": [
                        { "type": "string" },
                        { "type": "number", "format": "double" },
                        { "type": "integer", "format": "int32" }
                      ]
                    },
                    "displayName": { "type": "string" }
                  }
                }
              }
            },
            "description": "Enumerations for the format.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represent the definition of semantic property formats for content items."
      },
      "PropertyFormatPage": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PropertyFormat" },
            "description": "The items in this paged collection.",
            "readOnly": true
          },
          "pageIndex": {
            "type": "integer",
            "description": "The zero-based index of the current page.",
            "format": "int32",
            "readOnly": true
          },
          "pageSize": {
            "type": "integer",
            "description": "The number of item in each page. Not necessarily the same as the number of items in this page.",
            "format": "int32",
            "readOnly": true
          },
          "totalItemCount": {
            "type": "integer",
            "description": "The estimated total number of items in the collection. May be omitted if the total item count is unknown.",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PropertyGroup": {
        "required": ["key"],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 255,
            "minLength": 2,
            "type": "string",
            "description": "The key that identifies this PropertyGroup.",
            "readOnly": true
          },
          "displayName": {
            "maxLength": 255,
            "type": "string",
            "description": "The display name of this PropertyGroup."
          },
          "source": {
            "type": "string",
            "description": "A string that is used to indicate the source of this PropertyGroup.",
            "readOnly": true
          },
          "sortOrder": {
            "type": "integer",
            "description": "An value that is used to when sorting PropertyGroup instances.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Describes a property group of a ContentType in the CMS."
      },
      "PropertyGroupPage": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PropertyGroup" },
            "description": "The items in this paged collection.",
            "readOnly": true
          },
          "pageIndex": {
            "type": "integer",
            "description": "The zero-based index of the current page.",
            "format": "int32",
            "readOnly": true
          },
          "pageSize": {
            "type": "integer",
            "description": "The number of item in each page. Not necessarily the same as the number of items in this page.",
            "format": "int32",
            "readOnly": true
          },
          "totalItemCount": {
            "type": "integer",
            "description": "The estimated total number of items in the collection. May be omitted if the total item count is unknown.",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "StringEnumerationSettings": {
        "type": "object",
        "properties": {
          "values": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "Enumeration values for this property or format."
          }
        },
        "additionalProperties": false,
        "description": "A writable implementation of an EnumerationSettings`1."
      },
      "StringListItem": {
        "allOf": [
          { "$ref": "#/components/schemas/ListPropertyItem" },
          {
            "type": "object",
            "properties": {
              "minLength": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "maxLength": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "pattern": { "type": "string", "nullable": true },
              "enum": {
                "$ref": "#/components/schemas/StringEnumerationSettings"
              }
            },
            "additionalProperties": false
          }
        ],
        "description": "Describes a property list item that can contain a string."
      },
      "StringProperty": {
        "allOf": [
          { "$ref": "#/components/schemas/ContentTypeProperty" },
          {
            "type": "object",
            "properties": {
              "minLength": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "maxLength": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "pattern": { "type": "string", "nullable": true },
              "enum": {
                "$ref": "#/components/schemas/StringEnumerationSettings"
              }
            },
            "additionalProperties": false
          }
        ],
        "description": "Describes a property that can contain strings."
      },
      "UrlListItem": {
        "allOf": [
          { "$ref": "#/components/schemas/ListPropertyItem" },
          { "type": "object", "additionalProperties": false }
        ],
        "description": "Describes a property list item that can contain a URL."
      },
      "UrlProperty": {
        "allOf": [
          { "$ref": "#/components/schemas/ContentTypeProperty" },
          { "type": "object", "additionalProperties": false }
        ],
        "description": "Describes a property that can contain URLs."
      },
      "VersionStatus": {
        "enum": [
          "draft",
          "ready",
          "published",
          "previous",
          "scheduled",
          "rejected",
          "inReview"
        ],
        "type": "string",
        "description": "Represent the different status values of a content version."
      }
    },
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "description": "Use this scheme to generate an access token.",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "/_cms/preview2/oauth/token",
            "scopes": {}
          }
        }
      },
      "Http": {
        "type": "http",
        "description": "Use this scheme if you already have an access token.",
        "scheme": "bearer",
        "bearerFormat": "jwt"
      }
    }
  },
  "security": [{ "OAuth2": [] }, { "Http": [] }],
  "x-readme": { "explorer-enabled": true, "proxy-enabled": true }
}
