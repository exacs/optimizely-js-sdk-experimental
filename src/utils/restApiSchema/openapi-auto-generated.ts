/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/changesets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List changeset
         * @description Lists all changeset using the provided options.
         */
        get: operations["Changesets_List"];
        put?: never;
        /**
         * Create changeset
         * @description Creates a new changeset.
         */
        post: operations["Changesets_Create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/changesets/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get changeset
         * @description Gets the changeset with the provided key.
         */
        get: operations["Changesets_Get"];
        /**
         * Create or replace changeset
         * @description Creates or replaces a changeset. If a changeset with the provided key exist it is replaced.
         *     Otherwise a new changeset is created.
         */
        put: operations["Changesets_Put"];
        post?: never;
        /**
         * Delete changeset
         * @description Deletes the changeset with the provided key. If a changeset with the provided key does not exist an error is returned.
         */
        delete: operations["Changesets_Delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/changesets/{changeset}/items/{key}/versions/{version}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get changeset item
         * @description Gets the changeset item for the specified content reference.
         */
        get: operations["Changesets_GetItem"];
        put?: never;
        post?: never;
        /**
         * Delete changeset item
         * @description Deletes the specified changeset item from the changeset.
         */
        delete: operations["Changesets_DeleteItem"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/changesets/{changeset}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List changeset items
         * @description Lists the available changeset items for the specified changeset using
         *     the provided options.
         */
        get: operations["Changesets_ListItems"];
        put?: never;
        /**
         * Create changeset item
         * @description Creates the given changeset item.
         */
        post: operations["Changesets_CreateItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/changesets/{changeset}/items/{contentKey}/versions/{contentVersion}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update changeset item
         * @description Updates the given changeset item.
         */
        put: operations["Changesets_UpdateItem"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create content
         * @description Create a new content item.
         */
        post: operations["Content_Create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/content/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get content
         * @description Get shared metadata about the content instance with the provided key.
         */
        get: operations["Content_GetMetadata"];
        put?: never;
        post?: never;
        /**
         * Delete content
         * @description Deletes the content item with the provided key. If a content item with the provided key does not exist an error is returned.
         */
        delete: operations["Content_Delete"];
        options?: never;
        head?: never;
        /**
         * Update content
         * @description Update an existing content item. If a content item with the provided key does not exist an error is returned.
         */
        patch: operations["Content_PatchMetadata"];
        trace?: never;
    };
    "/content/{key}/path": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get content path
         * @description Get the content path with the provided key.
         */
        get: operations["Content_GetPath"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/content/{key}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List content in container
         * @description List the content items located in a specific container.
         */
        get: operations["Content_ListItems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/content/{key}/assets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List assets
         * @description List the assets that belongs to a content instance.
         */
        get: operations["Content_ListAssets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/content/{key}:copy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Copy content
         * @description Create a copy of the content item with the provided key.
         */
        post: operations["Content_Copy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/content/{key}:undelete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Restore content
         * @description Restore the deleted content item with the provided key. If a content item with the provided key is not deleted an error is returned.
         */
        post: operations["Content_Undelete"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/content/versions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query versions
         * @description List content versions based on the provided query options.
         */
        get: operations["Content_ListAllVersions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/content/{key}/versions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List versions
         * @description List versions of the content item with the provided key and the provided options.
         */
        get: operations["Content_ListVersions"];
        put?: never;
        /**
         * Create version
         * @description Create a new version of a content item.
         */
        post: operations["Content_CreateVersion"];
        /**
         * Delete locale
         * @description Deletes the content item with the provided key. If a content item with the provided key does not exist an error is returned.
         */
        delete: operations["Content_DeleteLocale"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/content/{key}/versions/{version}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get version
         * @description Get the content item with the provided key and version.
         */
        get: operations["Content_GetVersion"];
        put?: never;
        post?: never;
        /**
         * Delete version
         * @description Deletes the content item with the provided key. If a content item with the provided key does not exist an error is returned.
         */
        delete: operations["Content_DeleteVersion"];
        options?: never;
        head?: never;
        /**
         * Update version
         * @description Update an existing content item. If a content item with the provided key does not exist an error is returned.
         */
        patch: operations["Content_PatchVersion"];
        trace?: never;
    };
    "/contenttypes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List content types
         * @description List content types using the provided options.
         */
        get: operations["ContentTypes_List"];
        put?: never;
        /**
         * Create content type
         * @description Create a new content type.
         */
        post: operations["ContentTypes_Create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contenttypes/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get content type
         * @description Get the content type with the provided key.
         */
        get: operations["ContentTypes_Get"];
        /**
         * Create or replace content type
         * @description Create or replace a content type. If a content type with the provided key exist it is replaced.
         *     Otherwise a new content type is created.
         */
        put: operations["ContentTypes_Put"];
        post?: never;
        /**
         * Delete content type
         * @description Deletes the content type with the provided key. If a content type with the provided key does not exist an error is returned.
         */
        delete: operations["ContentTypes_Delete"];
        options?: never;
        head?: never;
        /**
         * Update content type
         * @description Update an existing content type. If a content type with the provided key does not exist an error is returned.
         */
        patch: operations["ContentTypes_Patch"];
        trace?: never;
    };
    "/displaytemplates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List display templates
         * @description List display templates using the provided options.
         */
        get: operations["DisplayTemplates_List"];
        put?: never;
        /**
         * Create display template
         * @description Create a new display template.
         */
        post: operations["DisplayTemplates_Create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/displaytemplates/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get display template
         * @description Get the display template with the provided key.
         */
        get: operations["DisplayTemplates_Get"];
        /**
         * Create or replace a display template
         * @description Create or replace a display template. If a display template with the provided key exist it is replaced.
         *     Otherwise a new display template is created.
         */
        put: operations["DisplayTemplates_Put"];
        post?: never;
        /**
         * Delete display template
         * @description Deletes the display template with the provided key.
         */
        delete: operations["DisplayTemplates_Delete"];
        options?: never;
        head?: never;
        /**
         * Update display template
         * @description Update an existing display template.
         */
        patch: operations["DisplayTemplates_Patch"];
        trace?: never;
    };
    "/oauth/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Request access token
         * @description Request an access token. This endpoint only supports the 'client_credentials' grant type
         *     and will only issue short-lived tokens.
         */
        post: operations["Oauth_Token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/packages/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get job status
         * @description Get a package job status.
         */
        get: operations["Packages_Get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/packages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export package
         * @description Export a data package.
         */
        get: operations["Packages_Export"];
        put?: never;
        /**
         * Import package
         * @description Import a data package.
         */
        post: operations["Packages_Import"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertyformats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List property formats
         * @description List all property formats using the provided options.
         */
        get: operations["PropertyFormats_List"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertyformats/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get property format
         * @description Get the property format with the provided key.
         */
        get: operations["PropertyFormats_Get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertygroups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List property groups
         * @description List property groups using the provided options.
         */
        get: operations["PropertyGroups_List"];
        put?: never;
        /**
         * Create property group
         * @description Create a new property group.
         */
        post: operations["PropertyGroups_Create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertygroups/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get property group
         * @description Get the property group with the provided key.
         */
        get: operations["PropertyGroups_Get"];
        /**
         * Create or replace property group
         * @description Create or replace a property group. If a property group with the provided key exist it is replaced.
         *     Otherwise a new property group is created.
         */
        put: operations["PropertyGroups_Put"];
        post?: never;
        /**
         * Delete property group
         * @description Deletes the property group with the provided key.
         */
        delete: operations["PropertyGroups_Delete"];
        options?: never;
        head?: never;
        /**
         * Update property group
         * @description Update an existing property group.
         */
        patch: operations["PropertyGroups_Patch"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Describes a property that can contain a reference to binary data. */
        BinaryProperty: Omit<components["schemas"]["ContentTypeProperty"], "type"> & {
            imageDescriptor?: components["schemas"]["ImageDescriptor"];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "BinaryProperty";
        };
        /** @description Describes a property that can contain a boolean value. */
        BooleanProperty: Omit<components["schemas"]["ContentTypeProperty"], "type"> & Record<string, never> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "BooleanProperty";
        };
        /** @description A writable implementation of an Changeset. */
        Changeset: {
            /** @description The unique key of this Changeset */
            key: string;
            /** @description The source of this Changeset */
            source?: string;
            /** @description The name of this Changeset. */
            displayName: string;
            /**
             * Format: date-time
             * @description A timestamp indicating when this changeset was first created.
             */
            readonly created?: string;
            /** @description The username of the user that created this changeset. */
            readonly createdBy?: string;
            /** Format: date-time */
            readonly lastModified?: string;
        };
        /** @description A writable implementation of an ChangesetItem. */
        ChangesetItem: {
            reference: components["schemas"]["ContentReference"];
            /** @description Gets/sets item category. */
            category?: string;
        };
        ChangesetItemPage: {
            /** @description The items in this paged collection. */
            readonly items?: components["schemas"]["ChangesetItem"][];
            /**
             * Format: int32
             * @description The zero-based index of the current page.
             */
            readonly pageIndex?: number;
            /**
             * Format: int32
             * @description The number of item in each page. Not necessarily the same as the number of items in this page.
             */
            readonly pageSize?: number;
            /**
             * Format: int32
             * @description The estimated total number of items in the collection. May be omitted if the total item count is unknown.
             */
            readonly totalItemCount?: number;
        };
        ChangesetPage: {
            /** @description The items in this paged collection. */
            readonly items?: components["schemas"]["Changeset"][];
            /**
             * Format: int32
             * @description The zero-based index of the current page.
             */
            readonly pageIndex?: number;
            /**
             * Format: int32
             * @description The number of item in each page. Not necessarily the same as the number of items in this page.
             */
            readonly pageSize?: number;
            /**
             * Format: int32
             * @description The estimated total number of items in the collection. May be omitted if the total item count is unknown.
             */
            readonly totalItemCount?: number;
        };
        /** @description Describes a property list item that can contain a component instance of a specific type. */
        ComponentListItem: Omit<components["schemas"]["ListPropertyItem"], "type"> & {
            contentType: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "ComponentListItem";
        };
        /** @description Describes a property that can contain a component instance of a specific type. */
        ComponentProperty: Omit<components["schemas"]["ContentTypeProperty"], "type"> & {
            contentType: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "ComponentProperty";
        };
        /**
         * @description Represent the base type of a ContentType.
         * @enum {string}
         */
        ContentBaseType: "page" | "component" | "media" | "image" | "video" | "folder" | "experience" | "section" | "element";
        /** @description Represents a content component. */
        ContentComponent: {
            /** @description The name of the content component. If Reference is set, the name is automatically set to the name of the referenced content. */
            name?: string;
            /** @description An optional display option for the content component. */
            displayOption?: string;
            /** @description An optional group for the personalizable component. */
            segmentationGroup?: string;
            /** @description Specifies the settings for the content component. */
            segments?: string[];
            /** @description A reference to the content of this component.
             *     Cannot be assigned together with Content. */
            reference?: string;
            /** @description The key of the content type that this is an embedded instance of. */
            contentType?: string;
            /** @description Dictionary with all custom properties as specified by associated ContentType */
            content?: {
                [key: string]: Record<string, never>;
            };
        };
        /** @description Represents a version of a content item. */
        ContentItem: {
            /** @description Set of content type properties. */
            properties?: {
                [key: string]: unknown;
            };
            /** @description The key that identifies this content item. */
            readonly key: string;
            /** @description The locale of this content instance. */
            readonly locale?: string;
            /** @description The version identifier of this content instance. */
            readonly version?: string;
            /** @description The content type of this content item. */
            readonly contentType?: string;
            /** @description The display name of this content item. */
            displayName: string;
            /**
             * Format: date-time
             * @description Indicates a time when this content was published or should be published.
             */
            published?: string | null;
            /**
             * Format: date-time
             * @description Indicates a time when this content expired or should expire.
             */
            expired?: string | null;
            status?: components["schemas"]["VersionStatus"];
            /**
             * Format: date-time
             * @description Indicates a time when this content version should transition to published status. Must only be assigned when Status is set to Scheduled.
             */
            delayPublishUntil?: string | null;
            /** Format: date-time */
            readonly lastModified?: string;
            /** @description The username of the user that made the latest modification to this content instance. */
            readonly lastModifiedBy?: string;
            /** @description The key that identifies the container content that this content item belongs to. */
            container?: string | null;
            /** @description The key that identifies the owner of this content. Content that is own by another content is also known as an asset. */
            owner?: string | null;
            /** @description A string that represents the segment that should be used when routing or generate routes to the current content instance. */
            routeSegment?: string | null;
        };
        /** @description The response object for Page`1 when used ContentType are included. */
        ContentItemListWithContentTypes: {
            /** @description The content types that are used by the content items in the response. */
            readonly contentTypes?: components["schemas"]["ContentType"][];
            /** @description The content items in this paged collection. */
            readonly items?: components["schemas"]["ContentItem"][];
            /**
             * Format: int32
             * @description The zero-based index of the current page.
             */
            readonly pageIndex?: number;
            /**
             * Format: int32
             * @description The number of item in each page. Not necessarily the same as the number of items in this page.
             */
            readonly pageSize?: number;
            /**
             * Format: int32
             * @description The estimated total number of items in the collection. May be omitted if the total item count is unknown.
             */
            readonly totalItemCount?: number;
        };
        ContentItemPage: {
            /** @description The items in this paged collection. */
            readonly items?: components["schemas"]["ContentItem"][];
            /**
             * Format: int32
             * @description The zero-based index of the current page.
             */
            readonly pageIndex?: number;
            /**
             * Format: int32
             * @description The number of item in each page. Not necessarily the same as the number of items in this page.
             */
            readonly pageSize?: number;
            /**
             * Format: int32
             * @description The estimated total number of items in the collection. May be omitted if the total item count is unknown.
             */
            readonly totalItemCount?: number;
        };
        /** @description The response object for ContentItem when used ContentType are included. */
        ContentItemWithContentTypes: {
            /** @description The content types that are used by the content item in the response. */
            readonly contentTypes?: components["schemas"]["ContentType"][];
            item?: components["schemas"]["ContentItem"];
        };
        /** @description Describes a property list item that can hold a content item. */
        ContentListItem: Omit<components["schemas"]["ListPropertyItem"], "type"> & {
            allowedTypes?: string[];
            restrictedTypes?: string[];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "ContentListItem";
        };
        /** @description Describes information about a locale instance of a content item. */
        ContentLocaleInfo: {
            /**
             * @description The display name of the content.
             * @example
             */
            readonly displayName?: string;
            /**
             * Format: date-time
             * @description The date and time when the first locale version for the content was created.
             * @example
             */
            readonly created?: string;
            /**
             * @description The username of the user that created this locale version of content.
             * @example
             */
            readonly createdBy?: string;
            status?: components["schemas"]["LocaleStatus"];
        };
        /** @description Represents metadata about a content item. */
        ContentMetadata: {
            /** @description The key that identifies this content. */
            key?: string;
            /** @description The content type of this content. */
            contentType?: string;
            /** @description The key that identifies the container content that this content belongs to. */
            container?: string | null;
            /** @description Indicates if the content contains any content items. */
            readonly hasItems?: boolean;
            /** @description The key that identifies the owner of this content. Content that is own by another content is also known as an asset. */
            owner?: string | null;
            /** @description Set of locales that the content item has been created for. */
            readonly locales?: {
                [key: string]: components["schemas"]["ContentLocaleInfo"];
            };
            /**
             * Format: date-time
             * @description A timestamp, which if provided, indicates when this content was deleted.
             */
            readonly deleted?: string | null;
            /** @description The username of the user that deleted this content. */
            readonly deletedBy?: string | null;
        };
        ContentMetadataPage: {
            /** @description The items in this paged collection. */
            readonly items?: components["schemas"]["ContentMetadata"][];
            /**
             * Format: int32
             * @description The zero-based index of the current page.
             */
            readonly pageIndex?: number;
            /**
             * Format: int32
             * @description The number of item in each page. Not necessarily the same as the number of items in this page.
             */
            readonly pageSize?: number;
            /**
             * Format: int32
             * @description The estimated total number of items in the collection. May be omitted if the total item count is unknown.
             */
            readonly totalItemCount?: number;
        };
        /** @description Describes a property that can contain a content item. */
        ContentProperty: Omit<components["schemas"]["ContentTypeProperty"], "type"> & {
            allowedTypes?: string[];
            restrictedTypes?: string[];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "ContentProperty";
        };
        /** @description A reference to a specific content instance. */
        ContentReference: {
            /** @description The content key that identifies the content. */
            readonly key?: string;
            /** @description The name of the content locale */
            readonly locale?: string;
            /** @description The identifier of a specific version of the content. */
            readonly version?: string;
        };
        /** @description Describes a property list item that can hold a reference to a content item. */
        ContentReferenceListItem: Omit<components["schemas"]["ListPropertyItem"], "type"> & {
            allowedTypes?: string[];
            restrictedTypes?: string[];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "ContentReferenceListItem";
        };
        /** @description Describes a property that can contain a reference to a content item. */
        ContentReferenceProperty: Omit<components["schemas"]["ContentTypeProperty"], "type"> & {
            allowedTypes?: string[];
            restrictedTypes?: string[];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "ContentReferenceProperty";
        };
        /** @description A writable implementation of an ContentType. */
        ContentType: {
            /** @description The key that identifies this ContentType. */
            readonly key: string;
            /** @description The display name of this ContentType. */
            displayName?: string;
            /** @description A description of this ContentType. */
            description?: string;
            baseType?: components["schemas"]["ContentBaseType"];
            /** @description A string that is used to indicate the source of this ContentType. */
            readonly source?: string;
            /**
             * Format: int32
             * @description An value that is used to when sorting ContentType instances.
             */
            sortOrder?: number;
            /** @description Provides a set of features that content based on this ContentType supports.
             *     This value is assigned based on the BaseType and cannot be modified. */
            features?: components["schemas"]["ContentTypeFeature"][];
            /** @description Specifies how this ContentType can be used. */
            usage?: components["schemas"]["ContentTypeUsage"][];
            /** @description Provides a set of content types that can be created in container of this type */
            mayContainTypes?: string[];
            /** @description Provides a set of media file extensions that this content type can handle. */
            mediaFileExtensions?: string[];
            /**
             * Format: date-time
             * @description A timestamp indicating when this ContentType was first created.
             */
            readonly created?: string;
            /** @description The username of the user that made the latest modification to this ContentType. */
            readonly lastModifiedBy?: string;
            /**
             * Format: date-time
             * @description Indicates the last time this content type was modified.
             */
            readonly lastModified?: string;
            /** @description Dictionary with all custom properties of this ContentType. */
            properties?: {
                [key: string]: {
                    /** @description Settings for the editor. */
                    editorSettings?: {
                        [key: string]: Record<string, never>;
                    } | null;
                } & (components["schemas"]["BinaryProperty"] | components["schemas"]["BooleanProperty"] | components["schemas"]["ComponentProperty"] | components["schemas"]["ContentProperty"] | components["schemas"]["ContentReferenceProperty"] | components["schemas"]["DateTimeProperty"] | components["schemas"]["FloatProperty"] | components["schemas"]["IntegerProperty"] | components["schemas"]["StringProperty"] | components["schemas"]["UrlProperty"] | components["schemas"]["JsonStringProperty"] | components["schemas"]["ListProperty"]);
            };
        };
        /**
         * @description Represent different features that a content type can have.
         * @enum {string}
         */
        ContentTypeFeature: "localization" | "versioning" | "publishPeriod" | "routing" | "binary";
        ContentTypePage: {
            /** @description The items in this paged collection. */
            readonly items?: components["schemas"]["ContentType"][];
            /**
             * Format: int32
             * @description The zero-based index of the current page.
             */
            readonly pageIndex?: number;
            /**
             * Format: int32
             * @description The number of item in each page. Not necessarily the same as the number of items in this page.
             */
            readonly pageSize?: number;
            /**
             * Format: int32
             * @description The estimated total number of items in the collection. May be omitted if the total item count is unknown.
             */
            readonly totalItemCount?: number;
        };
        /** @description A writable implementation of an ContentTypeProperty. */
        ContentTypeProperty: {
            type: components["schemas"]["PropertyDataType"];
            /** @description The key of the PropertyFormat that this ContentTypeProperty is an instance of. */
            format?: string | null;
            /** @description The display name of this ContentTypeProperty. */
            displayName?: string;
            /** @description A description of this ContentTypeProperty. */
            description?: string;
            /** @description Indicates if a property instance of this type must always be assigned a value. */
            required?: boolean;
            /** @description Indicates if a property instance of this type should be localized for each locale
             *     or if values are shared between all locales. */
            localized?: boolean;
            /** @description A reference to the PropertyGroup that this ContentTypeProperty is part of.
             *     If this value is empty, a group may be assigned by the system. */
            group?: string;
            /**
             * Format: int32
             * @description An value that is used to when sorting ContentTypeProperty instances.
             */
            sortOrder?: number;
            indexingType?: components["schemas"]["IndexingType"];
            /** @description Editor used for managing this property. */
            editor?: string | null;
            /** @description Settings for the editor. */
            editorSettings?: {
                [key: string]: Record<string, never>;
            } | null;
        };
        /**
         * @description Represent the usage types for a ContentType.
         * @enum {string}
         */
        ContentTypeUsage: "property" | "instance";
        /** @description Options for copying content. */
        CopyContentOptions: {
            /** @description Indicates if deleted content could be used as source. */
            allowDeleted?: boolean;
            /** @description Optional key of the container where the copied content should be placed. */
            container?: string | null;
            /** @description Optional key of the owner where the copied content should be placed. */
            owner?: string | null;
            /** @description Indicates if published versions of the content should keep their published status rather than being created as a draft version at the destination. */
            keepPublishedStatus?: boolean;
        };
        /** @description Describes a property list item that can contain a timestamp. */
        DateTimeListItem: Omit<components["schemas"]["ListPropertyItem"], "type"> & {
            /** Format: date-time */
            minimum?: string | null;
            /** Format: date-time */
            maximum?: string | null;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "DateTimeListItem";
        };
        /** @description Describes a property that can contain a timestamp. */
        DateTimeProperty: Omit<components["schemas"]["ContentTypeProperty"], "type"> & {
            /** Format: date-time */
            minimum?: string | null;
            /** Format: date-time */
            maximum?: string | null;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "DateTimeProperty";
        };
        /** @description Describes a setting for a display template. */
        DisplaySetting: {
            /** @description The display name of this display setting. */
            displayName: string;
            /** @description The suggested editor for this display setting. */
            editor?: string;
            /**
             * Format: int32
             * @description The sort order of this display setting within the template.
             */
            sortOrder?: number;
            /** @description The available choices for this display setting. */
            choices?: {
                [key: string]: components["schemas"]["DisplaySettingChoice"];
            };
        };
        /** @description Describes a setting for a display template. */
        DisplaySettingChoice: {
            /** @description The display name of this display setting. */
            displayName: string;
            /**
             * Format: int32
             * @description The sort order of this choice within the setting.
             */
            sortOrder?: number;
        };
        /** @description Describes a display template that can be assigned to content. */
        DisplayTemplate: {
            /** @description The key that identifies this display template. */
            readonly key: string;
            /** @description The display name of this display template. */
            displayName: string;
            /** @description The optional node type this display template is valid for. */
            nodeType?: string | null;
            baseType?: components["schemas"]["ContentBaseType"];
            /** @description The optional key of the content type this display template is valid for. */
            contentType?: string | null;
            /** @description If this is the default display template for the associated base type,
             *     node type or content type. */
            isDefault?: boolean;
            /**
             * Format: date-time
             * @description A timestamp indicating when this display template was first created.
             */
            readonly created?: string;
            /** @description The username of the user that created this display template. */
            readonly createdBy?: string;
            /**
             * Format: date-time
             * @description A timestamp indicating when this display template was last modified.
             */
            readonly lastModified?: string;
            /** @description The username of the user that last modified this display template. */
            readonly lastModifiedBy?: string;
            /** @description The available settings for this display template. */
            settings?: {
                [key: string]: components["schemas"]["DisplaySetting"];
            };
        };
        DisplayTemplatePage: {
            /** @description The items in this paged collection. */
            readonly items?: components["schemas"]["DisplayTemplate"][];
            /**
             * Format: int32
             * @description The zero-based index of the current page.
             */
            readonly pageIndex?: number;
            /**
             * Format: int32
             * @description The number of item in each page. Not necessarily the same as the number of items in this page.
             */
            readonly pageSize?: number;
            /**
             * Format: int32
             * @description The estimated total number of items in the collection. May be omitted if the total item count is unknown.
             */
            readonly totalItemCount?: number;
        };
        /** @description A writable implementation of an EnumerationSettings`1. */
        DoubleEnumerationSettings: {
            /** @description Enumeration values for this property or format. */
            values?: {
                [key: string]: string;
            };
        };
        /** @description Describes a property list item that can contain a float number. */
        FloatListItem: Omit<components["schemas"]["ListPropertyItem"], "type"> & {
            /** Format: double */
            minimum?: number | null;
            /** Format: double */
            maximum?: number | null;
            enum?: components["schemas"]["DoubleEnumerationSettings"];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "FloatListItem";
        };
        /** @description Describes a property that can contain a float number. */
        FloatProperty: Omit<components["schemas"]["ContentTypeProperty"], "type"> & {
            /** Format: double */
            minimum?: number | null;
            /** Format: double */
            maximum?: number | null;
            enum?: components["schemas"]["DoubleEnumerationSettings"];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "FloatProperty";
        };
        /** @description Instruction for generating an alternative image from the main binary of an image content item. */
        ImageDescriptor: {
            /**
             * Format: int32
             * @description The image width in pixels.
             */
            width?: number;
            /**
             * Format: int32
             * @description The image height in pixels.
             */
            height?: number;
            /** @description Indicates if the image should be pregenerated when a new image is uploaded rather than when first requested. */
            pregenerated?: boolean;
        };
        /** @description Describes a message from a package importing operation. */
        ImportPackageMessage: {
            /** @description The section where the message originated from. */
            readonly section?: string | null;
            /** @description The message describing an outcome. */
            readonly message?: string;
            /** @description The identifier of the resource that was the reason for this message to be created. */
            readonly identifier?: string | null;
        };
        /** @description Describes the result of a data package import. */
        ImportPackageResult: {
            /** @description Indication if the import succeeded. */
            readonly success?: boolean;
            /** @description List of messages describing the outcome from the package import. */
            outcomes?: components["schemas"]["ImportPackageMessage"][];
            /** @description List of error messages from the package import. */
            errors?: components["schemas"]["ImportPackageMessage"][];
            /** @description List of warning messages from the package import. */
            warnings?: components["schemas"]["ImportPackageMessage"][];
        };
        /**
         * @description Represent the indexing type of a ContentTypeProperty.
         * @enum {string}
         */
        IndexingType: "disabled" | "queryable" | "searchable";
        /** @description A writable implementation of an EnumerationSettings`1. */
        Int32EnumerationSettings: {
            /** @description Enumeration values for this property or format. */
            values?: {
                [key: string]: string;
            };
        };
        /** @description Describes a property list item that can contain integers. */
        IntegerListItem: Omit<components["schemas"]["ListPropertyItem"], "type"> & {
            /** Format: int32 */
            minimum?: number | null;
            /** Format: int32 */
            maximum?: number | null;
            enum?: components["schemas"]["Int32EnumerationSettings"];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "IntegerListItem";
        };
        /** @description Describes a property that can contain an integer. */
        IntegerProperty: Omit<components["schemas"]["ContentTypeProperty"], "type"> & {
            /** Format: int32 */
            minimum?: number | null;
            /** Format: int32 */
            maximum?: number | null;
            enum?: components["schemas"]["Int32EnumerationSettings"];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "IntegerProperty";
        };
        /** @description Describes a property that can contain a JSON value in the form of a string. */
        JsonStringProperty: Omit<components["schemas"]["ContentTypeProperty"], "type"> & Record<string, never> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "JsonStringProperty";
        };
        /** @description A property in the CMS that may hold a list of items. */
        ListProperty: Omit<components["schemas"]["ContentTypeProperty"], "type"> & {
            /**
             * Format: int32
             * @description Specifies the minimum number of items in this array property.
             */
            minItems?: number | null;
            /**
             * Format: int32
             * @description Specifies the maximum number of items in this array property.
             */
            maxItems?: number | null;
            /** @description Describes the list item of a ListProperty in the CMS. */
            items: components["schemas"]["ComponentListItem"] | components["schemas"]["ContentListItem"] | components["schemas"]["ContentReferenceListItem"] | components["schemas"]["DateTimeListItem"] | components["schemas"]["FloatListItem"] | components["schemas"]["IntegerListItem"] | components["schemas"]["StringListItem"] | components["schemas"]["UrlListItem"];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "ListProperty";
        };
        /** @description Describes the list item of a ListProperty in the CMS. */
        ListPropertyItem: {
            type: components["schemas"]["PropertyDataType"];
            /** @description The key of the PropertyFormat that this property item is an instance of. */
            format?: string | null;
        };
        /**
         * @description Represent the different status values of a content locale.
         * @enum {string}
         */
        LocaleStatus: "draft" | "published";
        /** @description Manifest that describest CMS definitions. */
        Manifest: {
            /** @description List of content type property groups. */
            propertyGroups?: components["schemas"]["PropertyGroup"][];
            /** @description List of content types. */
            contentTypes?: components["schemas"]["ContentType"][];
            /** @description List of display templates. */
            displayTemplates?: components["schemas"]["DisplayTemplate"][];
            /**
             * Format: date-time
             * @description A timestamp indicated when any item in this manifest was last modified.
             */
            readonly lastModified?: string;
        };
        /** @description Represents an OAuth JSON Web Token (JWT) and
         *     its expiry in seconds. */
        OauthToken: {
            /** @description Gets or sets the access token. */
            access_token?: string | null;
            /**
             * Format: int32
             * @description Gets or sets the expiry time in seconds.
             */
            expires_in?: number;
            /** @description Gets or sets the token type. */
            token_type?: string;
        };
        /** @description Represents an OAuth error. */
        OauthTokenError: {
            /** @description Gets or sets the error. */
            error?: string | null;
            /** @description Gets or sets the error description. */
            error_description?: string | null;
        };
        /** @description Represents an OAuth token request. */
        OauthTokenRequest: {
            /** @description Gets or sets the grant type. */
            grant_type?: string | null;
            /** @description Gets or sets the client id. */
            client_id?: string | null;
            /** @description Gets or sets the client secret. */
            client_secret?: string | null;
            /** @description Get or sets the subject to act as. */
            act_as?: string | null;
        };
        /** @description Describes the status of a package job. */
        PackageJob: {
            /** @description An unique key that can be used to track the staus of a package job. */
            readonly key?: string;
            status?: components["schemas"]["PackageJobStatus"];
            /** @description List of messages describing the outcome from the package job. */
            outcomes?: components["schemas"]["PackageJobMessage"][];
            /** @description List of error messages from the package job. */
            errors?: components["schemas"]["PackageJobMessage"][];
            /** @description List of warning messages from the package job. */
            warnings?: components["schemas"]["PackageJobMessage"][];
            /**
             * Format: date-time
             * @description A timestamp indicates when this task was first created.
             */
            readonly created?: string;
        };
        /** @description Describes a status message from a package job. */
        PackageJobMessage: {
            /**
             * @description The section where the message originated from.
             * @example
             */
            readonly section?: string;
            /**
             * @description The message describing an outcome.
             * @example
             */
            readonly message?: string;
            /**
             * @description The identifier of the resource that was the reason for this message to be created.
             * @example
             */
            readonly identifier?: string | null;
        };
        /** @description Represent the status of a package job. */
        PackageJobStatus: Record<string, never>;
        ProblemDetails: {
            type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            detail?: string | null;
            instance?: string | null;
            readonly code?: string | null;
            readonly errors?: {
                [key: string]: string[];
            } | null;
        } & {
            [key: string]: unknown;
        };
        /**
         * @description Represent the basic type that a PropertyFormat
         *     is using for data storage and data transport.
         * @enum {string}
         */
        PropertyDataType: "string" | "url" | "boolean" | "integer" | "float" | "dateTime" | "contentReference" | "content" | "binary" | "json" | "array" | "component";
        /** @description Represent the definition of semantic property formats for content items. */
        PropertyFormat: {
            /** @description The key that identifies this PropertyFormat. */
            key?: string;
            dataType?: components["schemas"]["PropertyDataType"];
            itemType?: components["schemas"]["PropertyDataType"];
            /** @description The name and identifier of this PropertyFormat. */
            displayName?: string;
            /** @description Editor used for managing properties with this format. */
            editor?: string | null;
            deleted?: boolean;
            /** @description Settings for the editor. */
            editorSettings?: {
                [key: string]: Record<string, never>;
            } | null;
            /** @description Enumerations for the format. */
            enum?: {
                values?: {
                    value?: string | number;
                    displayName?: string;
                }[];
            } | null;
        };
        PropertyFormatPage: {
            /** @description The items in this paged collection. */
            readonly items?: components["schemas"]["PropertyFormat"][];
            /**
             * Format: int32
             * @description The zero-based index of the current page.
             */
            readonly pageIndex?: number;
            /**
             * Format: int32
             * @description The number of item in each page. Not necessarily the same as the number of items in this page.
             */
            readonly pageSize?: number;
            /**
             * Format: int32
             * @description The estimated total number of items in the collection. May be omitted if the total item count is unknown.
             */
            readonly totalItemCount?: number;
        };
        /** @description Describes a property group of a ContentType in the CMS. */
        PropertyGroup: {
            /** @description The key that identifies this PropertyGroup. */
            readonly key: string;
            /** @description The display name of this PropertyGroup. */
            displayName?: string;
            /** @description A string that is used to indicate the source of this PropertyGroup. */
            readonly source?: string;
            /**
             * Format: int32
             * @description An value that is used to when sorting PropertyGroup instances.
             */
            sortOrder?: number;
        };
        PropertyGroupPage: {
            /** @description The items in this paged collection. */
            readonly items?: components["schemas"]["PropertyGroup"][];
            /**
             * Format: int32
             * @description The zero-based index of the current page.
             */
            readonly pageIndex?: number;
            /**
             * Format: int32
             * @description The number of item in each page. Not necessarily the same as the number of items in this page.
             */
            readonly pageSize?: number;
            /**
             * Format: int32
             * @description The estimated total number of items in the collection. May be omitted if the total item count is unknown.
             */
            readonly totalItemCount?: number;
        };
        /** @description A writable implementation of an EnumerationSettings`1. */
        StringEnumerationSettings: {
            /** @description Enumeration values for this property or format. */
            values?: {
                [key: string]: string;
            };
        };
        /** @description Describes a property list item that can contain a string. */
        StringListItem: Omit<components["schemas"]["ListPropertyItem"], "type"> & {
            /** Format: int32 */
            minLength?: number | null;
            /** Format: int32 */
            maxLength?: number | null;
            pattern?: string | null;
            enum?: components["schemas"]["StringEnumerationSettings"];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "StringListItem";
        };
        /** @description Describes a property that can contain strings. */
        StringProperty: Omit<components["schemas"]["ContentTypeProperty"], "type"> & {
            /** Format: int32 */
            minLength?: number | null;
            /** Format: int32 */
            maxLength?: number | null;
            pattern?: string | null;
            enum?: components["schemas"]["StringEnumerationSettings"];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "StringProperty";
        };
        /** @description Describes a property list item that can contain a URL. */
        UrlListItem: Omit<components["schemas"]["ListPropertyItem"], "type"> & Record<string, never> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "UrlListItem";
        };
        /** @description Describes a property that can contain URLs. */
        UrlProperty: Omit<components["schemas"]["ContentTypeProperty"], "type"> & Record<string, never> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "UrlProperty";
        };
        /**
         * @description Represent the different status values of a content version.
         * @enum {string}
         */
        VersionStatus: "draft" | "ready" | "published" | "previous" | "scheduled" | "rejected" | "inReview";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    Changesets_List: {
        parameters: {
            query?: {
                pageIndex?: number;
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChangesetPage"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Changesets_Create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The changeset that should be created. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Changeset"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Changeset"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Changesets_Get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The key of the changeset to retrieve. */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Changeset"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Changesets_Put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The key of the changeset to update or create. */
                key: string;
            };
            cookie?: never;
        };
        /** @description The values of the created or replaced changeset. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Changeset"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Changeset"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Changesets_Delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The key of the changeset to delete. */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Changeset"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Changesets_GetItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The changeset key */
                changeset: string;
                /** @description The content key */
                key: string;
                /** @description The content version */
                version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChangesetItem"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Changesets_DeleteItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The changeset key */
                changeset: string;
                /** @description The content key */
                key: string;
                /** @description The content version */
                version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChangesetItem"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Changesets_ListItems: {
        parameters: {
            query?: {
                pageIndex?: number;
                pageSize?: number;
            };
            header?: never;
            path: {
                /** @description The changeset key */
                changeset: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChangesetItemPage"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Changesets_CreateItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The changeset key */
                changeset: string;
            };
            cookie?: never;
        };
        /** @description The changeset item */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChangesetItem"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChangesetItem"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Changesets_UpdateItem: {
        parameters: {
            query?: {
                /** @description Indicates if a new changeset item should be created if it does not exist */
                allowCreate?: boolean;
            };
            header?: never;
            path: {
                /** @description The changeset key */
                changeset: string;
                /** @description The content key */
                contentKey: string;
                /** @description The content version */
                contentVersion: string;
            };
            cookie?: never;
        };
        /** @description The changeset item */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChangesetItem"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChangesetItem"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Content_Create: {
        parameters: {
            query?: {
                /** @description Indicates that the content validation should be ignored. */
                skipValidation?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The content item that should be created. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContentItem"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.optimizely.cms.v1.includeSchema+json": components["schemas"]["ContentItemWithContentTypes"];
                    "application/json": components["schemas"]["ContentItem"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Content_GetMetadata: {
        parameters: {
            query?: {
                /** @description Indicates that metadata for a deleted content may be returned. */
                allowDeleted?: boolean;
            };
            header?: never;
            path: {
                /** @description The key of the content to retrieve metadata for. */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContentMetadata"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Content_Delete: {
        parameters: {
            query?: {
                /** @description Indicates that the content item should be permanently deleted immediately or if it should be soft deleted first. */
                permanent?: boolean;
            };
            header?: never;
            path: {
                /** @description The key of the content item to delete. */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContentMetadata"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Content_PatchMetadata: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The key of the content item to patch. */
                key: string;
            };
            cookie?: never;
        };
        /** @description The values of the content item that should be updated. */
        requestBody: {
            content: {
                "application/merge-patch+json": components["schemas"]["ContentMetadata"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContentMetadata"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Content_GetPath: {
        parameters: {
            query?: {
                pageIndex?: number;
                pageSize?: number;
            };
            header?: never;
            path: {
                /** @description The key of the content path to retrieve. */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContentMetadataPage"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Content_ListItems: {
        parameters: {
            query?: {
                /** @description Indicates which content types or base types to include in the list. */
                contentTypes?: string[];
                pageIndex?: number;
                pageSize?: number;
            };
            header?: never;
            path: {
                /** @description The key of the content to retrieve items for. */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContentMetadataPage"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Content_ListAssets: {
        parameters: {
            query?: {
                /** @description Indicates which content types or base types to include in the list. */
                contentTypes?: string[];
                pageIndex?: number;
                pageSize?: number;
            };
            header?: never;
            path: {
                /** @description The key of the content to retrieve assets for. */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContentMetadataPage"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Content_Copy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The key of the content item to copy. */
                key: string;
            };
            cookie?: never;
        };
        /** @description Optional instructions for how to copy content. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CopyContentOptions"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContentMetadata"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Content_Undelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The key of the content item to undelete. */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContentMetadata"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Content_ListAllVersions: {
        parameters: {
            query?: {
                /** @description Indicates which content locales that should be listed. Use 'NEUTRAL' to include locale-neutral content.
                 *     Locale must be a valid IETF BCP-47 language tag. */
                locales?: string[];
                /** @description Indicates which status content versions must have to be listed. */
                statuses?: components["schemas"]["VersionStatus"][];
                pageIndex?: number;
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.optimizely.cms.v1.includeSchema+json": components["schemas"]["ContentItemListWithContentTypes"];
                    "application/json": components["schemas"]["ContentItemPage"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Content_ListVersions: {
        parameters: {
            query?: {
                /** @description Indicates which content locales that should be listed. Use 'NEUTRAL' to include locale-neutral content.
                 *     Locale must be a valid IETF BCP-47 language tag. */
                locales?: string[];
                /** @description Indicates which status content versions must have to be listed. */
                statuses?: components["schemas"]["VersionStatus"][];
                pageIndex?: number;
                pageSize?: number;
            };
            header?: never;
            path: {
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.optimizely.cms.v1.includeSchema+json": components["schemas"]["ContentItemListWithContentTypes"];
                    "application/json": components["schemas"]["ContentItemPage"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Content_CreateVersion: {
        parameters: {
            query?: {
                /** @description Indicates that the content validation should be ignored. */
                skipValidation?: boolean;
            };
            header?: never;
            path: {
                /** @description The key of the content item for which a new content version should be created. */
                key: string;
            };
            cookie?: never;
        };
        /** @description The content version that should be created. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContentItem"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.optimizely.cms.v1.includeSchema+json": components["schemas"]["ContentItemWithContentTypes"];
                    "application/json": components["schemas"]["ContentItem"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Content_DeleteLocale: {
        parameters: {
            query?: {
                locale?: string;
            };
            header?: never;
            path: {
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.optimizely.cms.v1.includeSchema+json": components["schemas"]["ContentItemWithContentTypes"];
                    "application/json": components["schemas"]["ContentItem"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Content_GetVersion: {
        parameters: {
            query?: {
                locale?: string;
            };
            header?: never;
            path: {
                key: string;
                version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.optimizely.cms.v1.includeSchema+json": components["schemas"]["ContentItemWithContentTypes"];
                    "application/json": components["schemas"]["ContentItem"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Content_DeleteVersion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                key: string;
                version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.optimizely.cms.v1.includeSchema+json": components["schemas"]["ContentItemWithContentTypes"];
                    "application/json": components["schemas"]["ContentItem"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Content_PatchVersion: {
        parameters: {
            query?: {
                /** @description The locale of the content that should be updated. */
                locale?: string;
                /** @description Indicates that the content validation should be ignored. */
                skipValidation?: boolean;
            };
            header?: never;
            path: {
                /** @description The key of the content item that should be updated. */
                key: string;
                /** @description The version of the content that should be updated. */
                version: string;
            };
            cookie?: never;
        };
        /** @description The content information that should be updated. */
        requestBody: {
            content: {
                "application/merge-patch+json": components["schemas"]["ContentItem"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.optimizely.cms.v1.includeSchema+json": components["schemas"]["ContentItemWithContentTypes"];
                    "application/json": components["schemas"]["ContentItem"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    ContentTypes_List: {
        parameters: {
            query?: {
                /** @description Only include types that are available for creation under the provided container type */
                forContainerType?: string;
                /** @description Indicates which sources should be included when listing content types.
                 *     Use All to include content types from all sources or
                 *     Default to include content types without a specific sources. */
                sources?: string[];
                pageIndex?: number;
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContentTypePage"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    ContentTypes_Create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The content type that should be created. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContentType"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContentType"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    ContentTypes_Get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The key of the content type to retrieve. */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContentType"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    ContentTypes_Put: {
        parameters: {
            query?: {
                /** @description Update the content type even though the changes might result in data loss. */
                ignoreDataLossWarnings?: boolean;
            };
            header?: never;
            path: {
                /** @description The key of the content type to update or create. */
                key: string;
            };
            cookie?: never;
        };
        /** @description The values of the created or replaced content type. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContentType"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContentType"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    ContentTypes_Delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The key of the content type to delete. */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContentType"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    ContentTypes_Patch: {
        parameters: {
            query?: {
                /** @description Update the content type even though the changes might result in data loss. */
                ignoreDataLossWarnings?: boolean;
            };
            header?: never;
            path: {
                /** @description The key of the content type to patch. */
                key: string;
            };
            cookie?: never;
        };
        /** @description The values of the content type that should be updated. */
        requestBody: {
            content: {
                "application/merge-patch+json": components["schemas"]["ContentType"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContentType"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    DisplayTemplates_List: {
        parameters: {
            query?: {
                pageIndex?: number;
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DisplayTemplatePage"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    DisplayTemplates_Create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The display template that should be created. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["DisplayTemplate"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DisplayTemplate"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    DisplayTemplates_Get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The key of the display template to retrieve. */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DisplayTemplate"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    DisplayTemplates_Put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The key of the display template to update or create. */
                key: string;
            };
            cookie?: never;
        };
        /** @description The values of the created or replaced display template. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["DisplayTemplate"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DisplayTemplate"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    DisplayTemplates_Delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The key of the display template to delete. */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DisplayTemplate"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    DisplayTemplates_Patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The key of the display template to patch. */
                key: string;
            };
            cookie?: never;
        };
        /** @description The values of the display template that should be updated. */
        requestBody: {
            content: {
                "application/merge-patch+json": components["schemas"]["DisplayTemplate"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DisplayTemplate"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Oauth_Token: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OauthTokenRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OauthToken"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OauthTokenError"];
                };
            };
        };
    };
    Packages_Get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The key of the package job. */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PackageJob"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Packages_Export: {
        parameters: {
            query?: {
                /** @description Indicates if read-only resources should be included in the export data. */
                includeReadOnly?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.optimizely.cms.v1.manifest+json": components["schemas"]["Manifest"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Packages_Import: {
        parameters: {
            query?: {
                /** @description The key of the container content where new content items should be created under. */
                container?: string;
                /** @description Indicates if the existing content item in CMS could be overwritten when the importing package contains
                 *     content item with the same key.
                 *     If set to `false`, always create new content item under the specified container regardless of the content key. */
                overwriteExistingContentItems?: boolean;
                /** @description Updates the content type even though the changes might result in data loss. */
                ignoreDataLossWarnings?: boolean;
                /** @description Specifies the locale in which content item in that locale will be imported. If no locale is defined
                 *     then content in all locales are imported. */
                locale?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.episerver.cms.data": string;
                "application/vnd.optimizely.cms.v1.manifest+json": string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ImportPackageResult"];
                };
            };
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PackageJob"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    PropertyFormats_List: {
        parameters: {
            query?: {
                pageIndex?: number;
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PropertyFormatPage"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    PropertyFormats_Get: {
        parameters: {
            query?: {
                /** @description Indicates that a deleted property format may be returned. */
                allowDeleted?: boolean;
            };
            header?: never;
            path: {
                /** @description The key of the property format to retrieve. */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PropertyFormat"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    PropertyGroups_List: {
        parameters: {
            query?: {
                /** @description Indicates which property groups sources that should be listed.
                 *     Use All to include groups from all sources or
                 *     Default to include groups without a specific sources. */
                sources?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PropertyGroupPage"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    PropertyGroups_Create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The property group that should be created. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PropertyGroup"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PropertyGroup"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    PropertyGroups_Get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The key of the property group to retrieve. */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PropertyGroup"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    PropertyGroups_Put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The key of the property group to update or create. */
                key: string;
            };
            cookie?: never;
        };
        /** @description The values of the created or replaced property group. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PropertyGroup"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PropertyGroup"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    PropertyGroups_Delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The key of the property group to delete. */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PropertyGroup"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    PropertyGroups_Patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The key of the property group to patch. */
                key: string;
            };
            cookie?: never;
        };
        /** @description The values of the property group that should be updated. */
        requestBody: {
            content: {
                "application/merge-patch+json": components["schemas"]["PropertyGroup"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PropertyGroup"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
}
